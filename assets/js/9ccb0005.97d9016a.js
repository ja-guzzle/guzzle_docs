(self.webpackChunkguzzle=self.webpackChunkguzzle||[]).push([[5564],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),p=r,g=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3903:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],l={id:"configure_truncate_partition_columns",title:"Truncate Partition Columns"},s={unversionedId:"how_to_guides/ingest_data/configure_truncate_partition_columns",id:"how_to_guides/ingest_data/configure_truncate_partition_columns",isDocsHomePage:!1,title:"Truncate Partition Columns",description:"Truncate Partition Columns feature is available with hive and delta datastore in target section.",source:"@site/docs/how_to_guides/ingest_data/Truncate Partition Column.md",sourceDirName:"how_to_guides/ingest_data",slug:"/how_to_guides/ingest_data/configure_truncate_partition_columns",permalink:"/guzzle_docs/docs/how_to_guides/ingest_data/configure_truncate_partition_columns",editUrl:"https://github.com/ja-guzzle/docs/blob/master/docs/how_to_guides/ingest_data/Truncate Partition Column.md",version:"current",frontMatter:{id:"configure_truncate_partition_columns",title:"Truncate Partition Columns"},sidebar:"sideBar",previous:{title:"Schema Drift",permalink:"/guzzle_docs/docs/how_to_guides/ingest_data/schema_drift"},next:{title:"Ingest Data from Local file System to MySQL Database",permalink:"/guzzle_docs/docs/how_to_guides/ingest_data/example_ingest_data"}},u=[{value:"Why we want to use this feature?",id:"why-we-want-to-use-this-feature",children:[]},{value:"Use of Truncate Partition Column in Guzzle",id:"use-of-truncate-partition-column-in-guzzle",children:[]},{value:"Example 1",id:"example-1",children:[]},{value:"Example 2",id:"example-2",children:[]}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Truncate Partition Columns feature is available with hive and delta datastore in target section."))),(0,i.kt)("h2",{id:"why-we-want-to-use-this-feature"},"Why we want to use this feature?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"While running an ingestion job if the user wants to remove some partitioned record before writing into the target table then he/she can use this feature.")),(0,i.kt)("h2",{id:"use-of-truncate-partition-column-in-guzzle"},"Use of Truncate Partition Column in Guzzle"),(0,i.kt)("p",null,"To use truncate partition column in Guzzle, the user needs to provide the target table partitioned column names and its corresponding value in ",(0,i.kt)("strong",{parentName:"p"},"Configure truncate partition columns")," section. As mentioned below:"),(0,i.kt)("a",{href:"https://guzzle.justanalytics.com/img/docs/how-to-guides/ingest_data/truncate_partition_columns_1.png",target:"_self"},(0,i.kt)("img",{width:"1000",src:"/img/docs/how-to-guides/ingest_data/truncate_partition_columns_1.png"})),(0,i.kt)("h2",{id:"example-1"},"Example 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Below is the scenario that if the user wants to perform ingestion activity, source and target are delta table and writer mode is ",(0,i.kt)("strong",{parentName:"p"},"append")," and truncate partition columns is defined with columns like ",(0,i.kt)("em",{parentName:"p"},'"location = sg"')," and ",(0,i.kt)("em",{parentName:"p"},'"system = default"'),". And the data in both source and target tables before job execution are like this:")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Records in source table:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"employee_src_delta:\n\n| id | name                 | location | system  |\n| 1  | Gallagher Fair       |    sg    | default |\n| 2  | Maia Thams           |    in    | demo    |\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Records in the target table with ",(0,i.kt)("strong",{parentName:"li"},"location")," and ",(0,i.kt)("strong",{parentName:"li"},"system")," as partition columns:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"employee_tgt_delta:\n\n| id | name                 | location | system  |\n| 4  | Lindon Corrad        |    sg    | default |\n| 5  | Che Millwall         |    in    | default |\n| 6  | Alidia Duiguid       |    sg    | demo    |\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Job config:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"version: 1\njob:\n  type: ingestion\nsource:\n  endpoint: delta_ds\n  properties:\n    table: employee_src_delta\n    format_properties:\n      clean_column_name: false\nschema:\n  schema_derivation_strategy: source\n  strict_schema_check: true\n  discard: true\n  columns: []\ntarget:\n  endpoint: delta_ds\n  properties:\n    table: employee_tgt_delta\n    auto_create_table: false\n    merge_schema: false\n  operation: append\n  truncate_partition_columns:\n    - name: location\n      value: sg\n    - name: system\n      value: default\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"While executing the job, Guzzle will delete records that have ",(0,i.kt)("em",{parentName:"p"},'"location_ = sg" and "system = default"')," from the target table before appending the source record into the target table. So, the record with id 4 is removed from the target table.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Records of target table after job run successfully:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"employee_tgt_delta:\n\n| id | name                 | location | system  |\n| 5  | Che Millwall         |    in    | default |\n| 6  | Alidia Duiguid       |    sg    | demo    |\n| 1  | Gallagher Fair       |    sg    | default |\n| 2  | Maia Thams           |    in    | demo    |\n")),(0,i.kt)("h2",{id:"example-2"},"Example 2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Below is the scenario that if the user wants to perform ingestion activity, source and target are delta table and writer mode is ",(0,i.kt)("strong",{parentName:"p"},"overwrite")," and truncate partition columns is defined with columns like ",(0,i.kt)("em",{parentName:"p"},'"location = sg"')," and ",(0,i.kt)("em",{parentName:"p"},'"system = default"'),". And the data in both source and target tables before job execution are like this:")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Records in source table:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"employee_src_delta:\n\n| id | name                 | location | system  |\n| 1  | Gallagher Fair       |    sg    | default |\n| 2  | Maia Thams           |    in    | demo    |\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Records in the target table with ",(0,i.kt)("strong",{parentName:"li"},"location")," and ",(0,i.kt)("strong",{parentName:"li"},"system")," as partition columns:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"employee_tgt_delta:\n\n| id | name                 | location | system  |\n| 3  | new_name             |    in    | demo    |\n| 4  | Lindon Corrad        |    sg    | default |\n| 5  | Che Millwall         |    in    | default |\n| 6  | Alidia Duiguid       |    sg    | demo    |\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Job config:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"version: 1\njob:\n  type: ingestion\nsource:\n  endpoint: delta_ds\n  properties:\n    table: employee_src_delta\n    format_properties:\n      clean_column_name: false\nschema:\n  schema_derivation_strategy: source\n  strict_schema_check: true\n  discard: true\n  columns: []\ntarget:\n  endpoint: delta_ds\n  properties:\n    table: employee_tgt_delta\n    auto_create_table: false\n    merge_schema: false\n  operation: overwrite\n  truncate_partition_columns:\n    - name: location\n      value: sg\n    - name: system\n      value: default\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"While executing the job, Guzzle will delete records that have ",(0,i.kt)("em",{parentName:"p"},'"location = sg" and "system = default"')," from the target table before overwriting the source record into the target table. So, the record with id 4 is removed because of the truncate partition column feature and the record with id 3 is deleted due to the overwrite operation.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Records of target table after job run successfully:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"employee_tgt_delta:\n\n| id | name                 | location | system  |\n| 5  | Che Millwall         |    in    | default |\n| 6  | Alidia Duiguid       |    sg    | demo    |\n| 1  | Gallagher Fair       |    sg    | default |\n| 2  | Maia Thams           |    in    | demo    |\n")))}d.isMDXComponent=!0}}]);