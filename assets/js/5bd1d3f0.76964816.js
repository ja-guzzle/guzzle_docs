(self.webpackChunkguzzle=self.webpackChunkguzzle||[]).push([[6344],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),f=a,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4892:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],l={},u={unversionedId:"releases/2_4_0/processing-behaviour-changes",id:"releases/2_4_0/processing-behaviour-changes",isDocsHomePage:!1,title:"Processing behaviour changes (Guzzle 2.4.0)",description:"- Before Guzzle v2.4.0, Processing module was using two steps process to insert data in target table",source:"@site/docs/releases/2_4_0/processing-behaviour-changes.md",sourceDirName:"releases/2_4_0",slug:"/releases/2_4_0/processing-behaviour-changes",permalink:"/guzzle_docs/docs/releases/2_4_0/processing-behaviour-changes",editUrl:"https://github.com/ja-guzzle/docs/blob/master/docs/releases/2_4_0/processing-behaviour-changes.md",version:"current",frontMatter:{}},s=[],c={toc:s};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Before Guzzle v2.4.0, Processing module was using two steps process to insert data in target table",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It truncates target table or partition based on truncate partition section configuration using TRUNCATE TABLE query"),(0,o.kt)("li",{parentName:"ul"},"Insert source processed data in target table using INSERT INTO query"))),(0,o.kt)("li",{parentName:"ul"},"From Guzzle v2.4.0, Processing module use single atomic operation INSERT OVERWRITE to truncate and insert data in target table"),(0,o.kt)("li",{parentName:"ul"},"Due to this change, below are some behaviour changes you will find in Guzzle v2.4.0")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Feature description"),(0,o.kt)("th",{parentName:"tr",align:null},"Before v2.4.0"),(0,o.kt)("th",{parentName:"tr",align:null},"From v2.4.0"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"When partition column is present in source data and same column is configured in truncate partition"),(0,o.kt)("td",{parentName:"tr",align:null},"It allows partition column in source data and respect source partition column value"),(0,o.kt)("td",{parentName:"tr",align:null},"Job will failed if partition column is found in source data and same partition column is configured in truncate partition section. To prevent this situation, user has to manually exclude partition column from source.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"When subset of partition columns are configured in truncate partition section for hive technology"),(0,o.kt)("td",{parentName:"tr",align:null},"It allows subset of partition columns in truncate partition section"),(0,o.kt)("td",{parentName:"tr",align:null},"Job will failed if subset of partition columns are configured in truncate partition section. To prevent this situation, user has to configure either all partition columns or none partition columns. This applies only for hive technology. For delta technology, user can configured subset of partition columns in truncate partition section.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"When truncate partition section is not configured for hive technology. It will result into different output."),(0,o.kt)("td",{parentName:"tr",align:null},"It truncates full target table and insert source data in target table"),(0,o.kt)("td",{parentName:"tr",align:null},"It will not truncate full target table. It will truncate only those partitions for which source contains data. Other partitions data will remain intact.")))))}p.isMDXComponent=!0}}]);